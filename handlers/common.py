import requests
import xml.etree.ElementTree as ET
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.types import FSInputFile, URLInputFile

# from core import core_pg_ssh as pg
# from core import core_pg as pg
# from core import core_asyncpg as pg

from core.db import db
# from core.db_ssh import db

from config import macro
from core import core_log as log

import os
import json
import inspect

from states.user_state import UserState
from keyboards.keyboards import get_reply_keyboard
from keyboards.keyboards import get_inline_keyboard

# from bot import bot

router = Router()

# –∏–º—è —Ñ–∞–π–ª–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
# bot_users_file = 'bot_users.json'
# —Å–ø–∏—Å–æ–∫ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≥–ª–æ–±–∞–ª—å–Ω—ã–π, —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞)
registered_users_id = list()
# –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –∫—É—Ä—Å—ã USD (–¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞, —Ç.–∫. –≤ API –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
exchange_rates = {
    'last_updated_datetime': datetime.utcnow().replace(year=2023),
    'rates': list()
}


async def set_registered_users_id() -> None:
    """
    –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ registered_users_id (–∏–∑ —Ñ–∞–π–ª–∞ / –∏–∑ –ë–î)
    :return: None
    """
    try:
        global registered_users_id

        # # –∏–∑ —Ñ–∞–π–ª–∞
        # if os.path.exists(bot_users_file):
        #     with open(bot_users_file, 'r') as json_file:
        #         registered_users = json.load(json_file)
        #         registered_users_id.clear()
        #         for user in registered_users:
        #             registered_users_id.append(user.get('id'))

        # –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –ë–î
        registered_users_id.clear()
        query = 'select tg_id from users where active = TRUE'
        for tg_id in await db.fetch(query=query):
            registered_users_id.append(tg_id[0])
        # print(registered_users_id)
    except Exception as err:
        await log.log(text=f'[no chat_id] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error',
                      facility=os.path.basename(__file__))


async def add_new_user(user: dict) -> bool:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞. –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª / –ë–î, –¥–æ–±–∞–≤–ª—è–µ—Ç id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
    :param user: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (—Å–ª–æ–≤–∞—Ä—å{id, full_name})
    :return: bool
    """
    try:
        global registered_users_id
        # –¥–æ–±–∞–≤–ª—è–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫
        registered_users_id.append(user.get('id'))
        # print(registered_users_id)

        # # –¥–æ–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª
        # if os.path.exists(bot_users_file):
        #     with open(bot_users_file, 'r') as json_file:
        #         registered_users = json.load(json_file)
        #     with open(bot_users_file, 'w') as json_file:
        #         registered_users.append(user)
        #         json.dump(registered_users, json_file)
        # else:
        #     with open(bot_users_file, 'w') as json_file:
        #         json.dump([user], json_file)

        # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users –ø–æ telegram_id
        query = f"SELECT active from users where tg_id = {user.get('id')}"
        rows = await db.fetch(query=query)
        # print(rows)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–º—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if rows:
            query = f"UPDATE users SET active = True WHERE tg_id = {user.get('id')}"
        # –∏–Ω–∞—á–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É users –ë–î
        else:
            query = f"INSERT INTO users (name, tg_id, active) VALUES ('{user.get('full_name')}', {user.get('id')}, True)"
        # print(query)
        await db.execute(query=query)
        return True

    except Exception as err:
        await log.log(text=f'[no chat_id] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error',
                      facility=os.path.basename(__file__))


async def get_registered_users_id() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å telegram_id –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :return: list
    """
    global registered_users_id
    return registered_users_id


async def get_course_cbrf(currency: str = 'USD') -> float:
    """
    –ö—É—Ä—Å –¶–ë –†–§
    :param currency: –≤–∞–ª—é—Ç–∞
    :return: –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ —Ä—É–±–ª—é
    """
    try:
        valute = f"./Valute[CharCode='{currency}']/Value"
        url = 'https://www.cbr.ru/scripts/XML_daily.asp'
        rate = float(ET.fromstring(requests.get(url=url).text).find(valute).text.replace(',', '.'))
        return rate
    except Exception as err:
        await log.log(text=f'[no chat_id] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error',
                      facility=os.path.basename(__file__))


async def set_exchange_rates() -> None:
    """
    –ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—É—Ä—Å—ã
    :return: None
    """
    global exchange_rates
    rate = await get_course_cbrf()
    # print(rate)
    # –µ—Å–ª–∏ –µ—Å—Ç—å –∫—É—Ä—Å, —Ç–æ —Å–¥–≤–∏–≥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–ª–µ–≤–æ
    if rate:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 29 + 1 –∑–Ω–∞—á–µ–Ω–∏–π
        while len(exchange_rates.get('rates')) >= 30:
            exchange_rates.get('rates').pop(0)
        exchange_rates.get('rates').append(rate)
        exchange_rates['last_updated_datetime'] = datetime.utcnow()
        # print(exchange_rates)


async def split_text(text: str, max_part_length: int = 4096, marker_symbol: str = '\n') -> list:
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
    :param text: —Ç–µ–∫—Å—Ç
    :param max_part_length: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (4096 –¥–ª—è telegram)
    :param marker_symbol: —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (–ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
    :return: —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Ç–µ–∫—Å—Ç–∞
    """
    parts_list = []
    # –†–µ–∂–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ part_length —Å–∏–º–≤–æ–ª–æ–≤
    i = 0
    total = len(text)
    while i < total:
        # –∏—â–µ–º –±–ª–∏–∂–∞–π—à–∏–π marker_symbol (–Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏)
        buf_end = i + max_part_length
        if buf_end >= total:
            buf_end = total
        else:
            while buf_end > i and text[buf_end:buf_end + 1] != marker_symbol:
                buf_end -= 1
        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        # print(f'–î–ª–∏–Ω–∞ –ø–æ—Ä—Ü–∏–∏ - {len(text[i:buf_end])}')
        parts_list.append(text[i:buf_end])
        # –Ω–∞—á–∞–ª–æ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ—Ä—Ü–∏–∏
        i = buf_end
    return parts_list


async def main_menu(message: Message, state: FSMContext):
    """
    –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        # keyboard = await get_reply_keyboard(['–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', 'üí≤ USD/RUB', '–ì—Ä–∞—Ñ–∏–∫ USD/RUB'], [2])
        # 27.01.2024 –ø–æ–∫–∞ –∑–∞–º–µ–Ω–∏–ª –Ω–∞ 2 –∫–Ω–æ–ø–∫–∏
        # 11.02.2024 –ø–æ–∫–∞ –∑–∞–º–µ–Ω–∏–ª –Ω–∞ 4 –∫–Ω–æ–ø–∫–∏ (–¥–æ–±–∞–≤–∏–ª '‚úî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
        keyboard = await get_reply_keyboard(['–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', 'USD/RUB', '‚úî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è'], [2])
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤—ã
        # keyboard = ReplyKeyboardRemove()
        await message.answer(text='–Ø –º–æ–≥—É –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å', reply_markup=keyboard)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        query = "select category, count(*) from warehouse "
        where = "where warehouse_id=40 and balance>0 "
        group = "group by category order by category"
        query += where + group
        # print(query)
        rows = await db.fetch(query=query)
        # rows = pg.execute(query)
        buttons = {}
        for row in rows:
            buttons.update({f'{row[0]} ({row[1]})': {
                'action': 'category',
                'choice': f'{row[0]}'
            }})
        keyboard = await get_inline_keyboard(buttons, [1])
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=keyboard)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ 'choosing_category'
        await state.set_state(UserState.choosing_category)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands=['start']))
async def cmd_start(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ 'Start'. State –ª—é–±–æ–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        global registered_users_id

        # –µ—Å–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if message.chat.id not in registered_users_id:
            if await add_new_user({'id': message.chat.id, 'full_name': message.from_user.full_name}):
                await message.answer(text='–Ø –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª, –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.')
            else:
                await message.answer(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.')
        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        await main_menu(message, state)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands=['alllist']))
async def cmd_alllist(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /alllist. –í—ã–≤–æ–¥ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    :param message: message
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return:
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        order = list()
        order.append("SAMSUNG")
        order.append("APPLE")
        order.append("APPLE IPHONE")
        order.append("FLY")
        order.append("INFINIX")
        order.append("TECNO")
        order.append("HONOR, HUAWEI")
        order.append("OnePlus")
        order.append("GOOGLE PIXEL")
        order.append("REALME")
        order.append("DYSON")
        order.append("GO PRO")
        order.append("SONY PS")
        order.append("XIAOMI")
        order.append("XIAOMI POCO")
        order.append("XIAOMI MI-—Å–µ—Ä–∏—è")
        order.append("XIAOMI REDMI")
        order.append("HOTWAV")
        order.append("DOOGEE")
        order.append("ULEFONE")
        order.append("OUKITEL")
        order.append("BLACKVIEW")
        order.append("ATOUCH")
        order.append("UMIIO")
        order.append("X-PRIME")
        order.append("NOKIA")
        order.append("JBL")
        order.append("PITAKA")
        order.append("–£–ú–ù–ê–Ø –ö–û–õ–û–ù–ö–ê")

        # –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –¥–µ–ª–æ –Ω–µ –±—ã—Å—Ç—Ä–æ–µ
        await message.answer(text='‚åõ —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ‚åõ')

        #
        # 1 –°–Ω–∞—á–∞–ª–∞ –±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –ö–∞—Ç–µ–≥–æ—Ä–∏–π
        # 2 –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–æ–∫ –í–µ–Ω–¥–æ—Ä–æ–≤
        # 3 –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ–Ω–¥–æ—Ä–∞ —Å–ø–∏—Å–æ–∫ –¢–æ–≤–∞—Ä–æ–≤
        #
        text = ""
        #
        # query Vendor
        #
        queryV = "select distinct vendor from warehouse where warehouse_id=40 and balance>0 order by vendor"
        rowsV = await db.fetch(query=queryV)
        # rowsV    = pg.execute( queryV, conn=env['db']['conn'] )
        for rowV in rowsV:
            # –µ—Å–ª–∏ –≤–µ–Ω–¥–æ—Ä–∞ –µ—â—ë –Ω–µ—Ç, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º
            if rowV[0] not in order:
                order.append(rowV[0])

        for vendor in order:
            #
            # add Vendor in answers text
            #
            text += "\n------------------------------\n" + str(vendor) + "\n------------------------------"
            #
            # query Category
            #
            queryC = "select distinct category from warehouse where warehouse_id=40 and balance>0 and vendor = '" + str(
                vendor) + "' order by category"
            rowsC = await db.fetch(query=queryC)
            # rowsC    = pg.execute( queryC, conn=env['db']['conn'] )
            for rowC in rowsC:
                #
                # add Category in answers text
                #
                text += "\n" + str(rowC[0]) + "\n"

                #
                # query Products
                #
                queryP = "select description, price from warehouse where warehouse_id=40 and balance>0 and category = '" + str(
                    rowC[0]) + "' and vendor='" + str(vendor) + "' order by description"
                rowsP = await db.fetch(query=queryP)
                # rowsP   = pg.execute( queryP, conn=env['db']['conn'] )
                for rowP in rowsP:
                    text += f'{rowP[0]} - {rowP[1]}\n'
                    # text += "{0}  - {1}\n".format( rowP[0], rowP[1] )

        #
        # Macro replace
        #
        # –ó–∞–º–µ–Ω–∞ –Ω–∞ —Å–∏–º–≤–æ–ª—ã
        for c in macro.keys():
            text = text.replace(c, macro[c])

        # print(f'–î–ª–∏–Ω–∞ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è - {len(text)}')
        # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–æ—Å—å
        if not len(text):
            await message.answer(text='–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å.')
        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å –∏ –æ–Ω –±–æ–ª—å—à–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –µ–≥–æ –Ω–∞–¥–æ —Ä–µ–∑–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        elif len(text) > 4096:
            for part_text in await split_text(text=text):
                # –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ—Ä—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
                # print(f'–î–ª–∏–Ω–∞ –ø–æ—Ä—Ü–∏–∏ - {len(part_text)}')
                await message.answer(text=part_text)
        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å, –Ω–æ –æ–Ω –º–µ–Ω—å—à–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        else:
            await message.answer(text=text)

    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands=['about']))
async def cmd_about(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /about
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        about_content = """–£–≤–∞–∂–∞–µ–º—ã–µ –∫–æ–ª–ª–µ–≥–∏, –¥—Ä—É–∑—å—è!
    
        –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.
    
        –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –∏ —Ü–µ–Ω–∞–º–∏.
        –ü–æ –ª—é–±—ã–º –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É 8 963 962 7770"""
        await message.answer(text=about_content)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text == '–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
async def return_in_main_menu(message: Message, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()
        await main_menu(message, state)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text == '‚ùå–û—Ç–ø–∏—Å–∞—Ç—å—Å—è')
async def unsubscribe(message: Message, state: FSMContext):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        global registered_users_id
        # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ telegram-id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
        # if not registered_users_id:
        #     await set_registered_users_id()
        if message.chat.id in registered_users_id:
            registered_users_id.remove(message.chat.id)
            # –¥–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º –≤ —Ç–∞–±–ª–∏—Ü–µ users –ë–î
            query = f"UPDATE users SET active = False WHERE tg_id = {message.chat.id}"
            # print(query)
            await db.execute(query=query)
            await message.answer(text='–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç –±–æ—Ç–∞')
        else:
            await message.answer(text='–í —Å–ø–∏—Å–∫–µ –≤–∞—Å –Ω–µ—Ç')

    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text == '‚úî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è')
async def unsubscribe(message: Message, state: FSMContext):
    """
    –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()
        global registered_users_id

        # –µ—Å–ª–∏ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        if message.chat.id not in registered_users_id:
            if await add_new_user({'id': message.chat.id, 'full_name': message.from_user.full_name}):
                await message.answer(text='–Ø –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª, –º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å.')
            else:
                await message.answer(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å —É –º–µ–Ω—è –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å.')
        # –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
        else:
            await message.answer(text='–í—ã —É–∂–µ –≤ –ø–æ–¥–ø–∏—Å–∫–µ')
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}',
                      severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text == 'USD/RUB')
async def get_course_usd_rub(message: Message, state: FSMContext):
    """
    –û—Ç–ø–∏—Å–∞—Ç—å—Å—è
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        global exchange_rates
        if exchange_rates['last_updated_datetime'].date() < datetime.utcnow().date():
            # print('–ò–º–µ—é—â–∏–µ—Å—è –∫—É—Ä—Å—ã —É—Å—Ç–∞—Ä–µ–ª–∏')
            await set_exchange_rates()
        await message.answer(text=f'–ö—É—Ä—Å USD = {exchange_rates.get("rates")[-1]}')
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text == '–ì—Ä–∞—Ñ–∏–∫ USD/RUB')
async def get_chart_usd_rub(message: Message, state: FSMContext):
    try:
        # TODO –°–¥–µ–ª–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ USR/RUB
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        await message.answer(text='–ì—Ä–∞—Ñ–∏–∫ –≤ —Ä–∞–±–æ—Ç–µ')
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands='get_log'))
async def cmd_log(message: Message, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∞–º–∏ –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param message:
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return:
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        await message.answer(text='–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏:')
        file_from_pc = FSInputFile('server.log')
        await message.answer_document(file_from_pc)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands='get_bot_users'))
async def cmd_get_bot_users(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
    :param message:
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return:
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        # # –∏–∑ —Ñ–∞–π–ª–∞
        # if os.path.exists(bot_users_file):
        #     with open(bot_users_file, 'r') as json_file:
        #         registered_users = json.load(json_file)
        #     text_answer = ''
        #     for count, user in enumerate(registered_users, start=1):
        #         text_answer += f'{count}. {user.get("full_name")}\n'
        #     await message.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n{text_answer}')
        # else:
        #     await message.answer(text='–£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.')

        # –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users –ë–î
        # –ø–æ–ª—É—á–∞–µ–º full_name, active –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º tg_id
        query = 'SELECT name, active FROM users WHERE tg_id is not NULL'
        subs_users = ''
        subs_count = 0
        unsubs_users = ''
        unsubs_count = 0
        for user in await db.fetch(query=query):
            if user[1]:
                subs_count += 1
                subs_users += f'{subs_count}. {user[0]}\n'
            else:
                unsubs_count += 1
                unsubs_users += f'{unsubs_count}. {user[0]}\n'
        text_answer = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ ‚úî:\n{subs_users}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞ ‚ùå:\n{unsubs_users}' if len(subs_users + unsubs_users) else '–£ –±–æ—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
        await message.answer(text=text_answer)

    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(Command(commands=['macro']))
async def cmd_macro(message: Message, state: FSMContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /macro. –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        text = "<code>"
        for c in macro.keys():
            text += f''
            text += "{0:16} {1}\n".format(c, str(macro[c]))
        text += "</code>"
        # answer = dict()
        # answer.update( {"text":text} )
        await message.answer(text=text)
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


@router.message(F.text.startswith(''))
async def find_in_db(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –ë–î)
    :param message: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param state: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    :return: None
    """
    try:
        # –æ—á–∏—Å—Ç–∫–∞ State
        await state.clear()

        query_text = message.text
        query = "select description, price from warehouse "
        where = f"where warehouse_id=40 and (category ilike '%{query_text}%' or vendor ilike '%{query_text}%' or description ilike '%{query_text}%') and balance>0 "
        order = "order by description"
        query += where + order
        # print(query)

        rows = await db.fetch(query=query)

        if rows:
            text = f'–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: <b>"{query_text}"</b>:\n'
            for row in rows:
                text += f'{row[0]} - {row[1]}\n'
            # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –±–æ–ª—å—à–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –µ–≥–æ –Ω–∞–¥–æ —Ä–µ–∑–∞—Ç—å –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(text) > 4096:
                for part_text in await split_text(text=text):
                    # –ø–µ—Ä–µ–¥–∞—ë–º –ø–æ—Ä—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
                    await message.answer(text=part_text)
            # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –º–µ–Ω—å—à–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤, —Ç–æ –µ–≥–æ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            else:
                await message.answer(text=text)
        else:
            await message.answer(text=f'–ü–æ–∏—Å–∫ <b>"{query_text}"</b> –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    except Exception as err:
        await log.log(text=f'[{str(message.chat.id)}] {inspect.currentframe().f_code.co_name} {str(err)}', severity='error', facility=os.path.basename(__file__))
        await message.answer(text='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.')


